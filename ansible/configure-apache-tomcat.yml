---
- name: Install and configure Apache Tomcat 9.0.105 on Ubuntu
  hosts: Cloudwatch
  become: yes
  vars:
    tomcat_version: 9.0.105
    tomcat_user: tomcat
    tomcat_group: tomcat
    tomcat_archive: "apache-tomcat-{{ tomcat_version }}.tar.gz"
    tomcat_url: "https://dlcdn.apache.org/tomcat/tomcat-9/v{{ tomcat_version }}/bin/{{ tomcat_archive }}"
    tomcat_install_dir: "/opt/apache-tomcat-{{ tomcat_version }}"
    tomcat_symlink: /opt/tomcat
    java_home_path: "/usr/lib/jvm/java-11-openjdk-amd64"

  tasks:
    - name: Ensure Java 11 is installed
      apt:
        name: openjdk-11-jdk
        state: present
        update_cache: yes

    - name: Create tomcat group
      group:
        name: "{{ tomcat_group }}"
        state: present

    - name: Create tomcat user
      user:
        name: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        shell: /bin/false
        home: "{{ tomcat_symlink }}"
        system: yes

    - name: Download Tomcat archive
      get_url:
        url: "{{ tomcat_url }}"
        dest: "/tmp/{{ tomcat_archive }}"
        mode: '0644'

    - name: Extract Tomcat archive
      unarchive:
        src: "/tmp/{{ tomcat_archive }}"
        dest: /opt/
        remote_src: yes
        creates: "{{ tomcat_install_dir }}"

    - name: Ensure old /opt/tomcat directory is removed if not symlink
      stat:
        path: "{{ tomcat_symlink }}"
      register: tomcat_symlink_stat

    - name: Remove /opt/tomcat directory if exists and not a symlink
      file:
        path: "{{ tomcat_symlink }}"
        state: absent
      when: tomcat_symlink_stat.stat.exists and not tomcat_symlink_stat.stat.islnk

    - name: Create symlink /opt/tomcat
      file:
        src: "{{ tomcat_install_dir }}"
        dest: "{{ tomcat_symlink }}"
        state: link

    - name: Set correct permissions for Tomcat
      file:
        path: "{{ tomcat_install_dir }}"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        recurse: yes

    - name: Create Tomcat systemd service file
      copy:
        dest: /etc/systemd/system/tomcat.service
        content: |
          [Unit]
          Description=Apache Tomcat Web Application Container
          After=network.target

          [Service]
          Type=forking

          Environment=JAVA_HOME={{ java_home_path }}
          Environment=CATALINA_PID={{ tomcat_symlink }}/temp/tomcat.pid
          Environment=CATALINA_HOME={{ tomcat_symlink }}
          Environment=CATALINA_BASE={{ tomcat_symlink }}
          Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
          Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'

          ExecStart={{ tomcat_symlink }}/bin/startup.sh
          ExecStop={{ tomcat_symlink }}/bin/shutdown.sh

          User={{ tomcat_user }}
          Group={{ tomcat_group }}
          UMask=0007
          RestartSec=10
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable and start Tomcat
      systemd:
        name: tomcat
        enabled: yes
        state: started

    # Create custom resource monitoring script
    - name: Create custom resource usage script
      copy:
        dest: /tmp/system-metrics.sh
        mode: '0755'
        content: |
          #!/bin/bash
          while true; do
            # Memory Usage Percentage
            memory_usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
            
            # CPU Usage Percentage
            cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
            
            # Disk Usage Percentage
            disk_usage=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')

            # Instance ID retrieval
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            # Send metrics to CloudWatch
            aws cloudwatch put-metric-data --metric-name Memory2Usage --namespace Custom --value $memory_usage --dimensions InstanceId=$instance_id --unit Percent
            aws cloudwatch put-metric-data --metric-name CPU2Usage --namespace Custom --value $cpu_usage --dimensions InstanceId=$instance_id --unit Percent
            aws cloudwatch put-metric-data --metric-name Disk2Usage --namespace Custom --value $disk_usage --dimensions InstanceId=$instance_id --unit Percent

            # Fetch CloudWatch metrics (not necessary but included)
            aws cloudwatch get-metric-statistics --metric-name Memory2Usage --namespace Custom --dimensions Name=InstanceId,Value=$instance_id --statistics Average --start-time $(date -u -d '10 minutes ago' +'%Y-%m-%dT%H:%M:%SZ') --end-time $(date -u +'%Y-%m-%dT%H:%M:%SZ') --period 60
            aws cloudwatch get-metric-statistics --metric-name CPU2Usage --namespace Custom --dimensions Name=InstanceId,Value=$instance_id --statistics Average --start-time $(date -u -d '10 minutes ago' +'%Y-%m-%dT%H:%M:%SZ') --end-time $(date -u +'%Y-%m-%dT%H:%M:%SZ') --period 60
            aws cloudwatch get-metric-statistics --metric-name Disk2Usage --namespace Custom --dimensions Name=InstanceId,Value=$instance_id --statistics Average --start-time $(date -u -d '10 minutes ago' +'%Y-%m-%dT%H:%M:%SZ') --end-time $(date -u +'%Y-%m-%dT%H:%M:%SZ') --period 60
            
            sleep 60
          done &

    - name: Run resource usage script in background
      shell: nohup sudo -u ubuntu /tmp/system-metrics.sh >/dev/null 2>&1 &
